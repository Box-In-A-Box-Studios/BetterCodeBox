@page "/"
@using BetterCodeBox.Lib.Interfaces
@using BetterCodeBox.Lib
@using BetterCodeBox.RazorLib.Components
@using Microsoft.Extensions.Configuration
@using Microsoft.Extensions.Logging
@inject IConfiguration Configuration

<PageTitle>Better Code Box</PageTitle>

@if (isScanning)
{
    <p>Scanning...</p>
    return;
}
@if (!results.Any())
{
    <p>Enter the directory to scan and the directory to store the results.</p>
    <input type="text" @bind="DirectoryToScan" />
    <button @onclick="ScanDirectory">Scan Directory</button>
    return;
}

@foreach (var result in results)
{
    <div class="float-end">
        <LetterGrade Score="@GetScore(result)" />
    </div>
    <h2>@result.Title</h2>
    @if (!result.Results.Any() || result.Results.All(x => x.Type == ResultType.Success))
    {
        <p>All Items Meet Standards.</p>
    }
    else
    {
        <p>Items With Issues:</p>
        
        bool hasSecondary = result.Results.Any(x => x.SecondaryIdentifier != null);
        
        <table class="table table-striped table-hover w-100">
            <thead>
                <tr>
                    <th>Method</th>
                    @if (hasSecondary)
                    {
                        <th>Secondary Method</th>
                    }
                    <th>Value</th>
                </tr>
              </thead>
            <tbody>
            @foreach (var item in result.Results.Where(x => x.Type == ResultType.Error).Skip(pagination[result.Title]).Take(10))
            {
                <tr>
                    <td>@item.Identifier</td>
                    @if (hasSecondary)
                    {
                        <td>@item.SecondaryIdentifier</td>
                    }
                    <td>@item.Value</td>
                </tr>
            }
            </tbody>
            <tfoot>
            <!-- Pagination -->
            @if (result.Results.Count(x=> x.Type == ResultType.Error) > 10)
            {
                <button class="btn btn-primary mx-2 my-2" @onclick="() => { PreviousPage(result.Title); }" disabled="@(pagination[result.Title] <= 0)">Previous</button>
                <button class="btn btn-primary mx-2 my-2" @onclick="() => { NextPage(result.Title); }" disabled="@(pagination[result.Title] + 10 >= result.Results.Count(x => x.Type == ResultType.Error))">Next</button>
                <span class="mx-2 my-2">Page @(pagination[result.Title] / 10 + 1)</span>
            }
            </tfoot>
        </table>
    }

    <hr class="my-3"/>
}


@code {
    
    public static List<ICodeAnalyzer> Analyzers { get; set; } = new List<ICodeAnalyzer>();
    public string DirectoryToScan { get; set; } = "C:\\";
    bool isScanning { get; set; } = false;
    private List<AnalysisData> results = new();
    private Dictionary<string,int> pagination = new();
    
    private async void ScanDirectory()
    {
        isScanning = true;
        StateHasChanged();
        ILogger logger = new BIABLogger();
        instance.pagination.Clear();
        instance.results.Clear();
        List<ICodeAnalyzer> analyzers = await DirectoryScanner.ScanDirectory(DirectoryToScan, logger, Configuration);
        
        //Add the results to the list
        foreach (var analyzer in analyzers)
        {
            var analysisData = new AnalysisData(analyzer);
            this.results.Add(analysisData);
            this.pagination.Add(analyzer.GetTitle(), 0);
        }
        Analyzers = analyzers;
        // Do the scanning here
        isScanning = false;
    }

    public Home()
    {
        instance = this;
    }
    
    private static Home instance;
    
    public static void UpdateResults(List<AnalysisData> dataAnalyzers)
    {
        instance.results.Clear();
        instance.pagination.Clear();
        instance.results.AddRange(dataAnalyzers);
        foreach (var analyzer in dataAnalyzers)
        {
            instance.pagination.Add(analyzer.Title, 0);
        }
        instance.StateHasChanged();
    }
    
    private int GetScore(AnalysisData results)
    {
        if (!results.Results.Any())
        {
            return 100;
        }
        if (results.Results.All(x => x.Type == ResultType.Success))
        {
            return 100;
        }

        return results.CurrentScore;
    }
    
    private void NextPage(string title)
    {
        pagination[title]+=10;
        StateHasChanged();
    }
    
    private void PreviousPage(string title)
    {
        pagination[title]-=10;
        if (pagination[title] < 0)
        {
            pagination[title] = 0;
        }
        StateHasChanged();
    }
}

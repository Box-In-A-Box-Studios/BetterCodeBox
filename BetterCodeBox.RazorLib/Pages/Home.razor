@page "/"
@using BetterCodeBox.Lib.Interfaces
@using BetterCodeBox.Lib
@using BetterCodeBox.RazorLib.Components
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Extensions.Configuration
@using Microsoft.Extensions.Logging
@using Microsoft.JSInterop
@inject IConfiguration Configuration
@inject IJSRuntime JSRuntime

<PageTitle>Better Code Box</PageTitle>

@if (isScanning)
{
    <p>Scanning...</p>
    return;
}
@if (!ResultState.Results.Any())
{
    <div class="col-12 col-xxl-4 col-xl-6 col-lg-8 col-md-10 col-sm-12">
        @if (!OperatingSystem.IsBrowser())
        {
            <p>Enter the directory to scan and the directory to store the results.</p>
            <div class="input-group">
                <label for="DirectoryToScan" class="input-group-text">Directory to Scan</label>
                <input type="text" @bind="DirectoryToScan"  class="form-control"/>
                <button @onclick="ScanDirectory" class="btn btn-primary">Scan</button>
            </div>
            <hr />
        }
        <!-- Or -->
        <p>Import a file with the results</p>
        <InputFile OnChange="ImportFile" class="form-control" />
    
    </div>
    return;
}

<SummaryBox Data="ResultState.Results" />
<hr />


@foreach (var result in ResultState.Results)
{
    <div class="float-end">
        <LetterGrade Score="@GetScore(result)" />
    </div>
    <h2 id="@result.FileTitle">@result.Title</h2>
    @if (!result.Results.Any() || result.Results.All(x => x.Type == ResultType.Success))
    {
        <p>All Items Meet Standards.</p>
    }
    else
    {
        <p>Items With Issues:</p>
        
        bool hasSecondary = result.Results.Any(x => x.SecondaryIdentifier != null);
        
        <table class="table table-striped table-hover w-100">
            <thead>
                <tr>
                    <th>Method</th>
                    @if (hasSecondary)
                    {
                        <th>Secondary Method</th>
                    }
                    <th>Value</th>
                </tr>
              </thead>
            <tbody>
            @foreach (var item in result.Results.Where(x => x.Type == ResultType.Error).Skip(pagination[result.Title]).Take(10))
            {
                <tr>
                    <td>@item.Identifier</td>
                    @if (hasSecondary)
                    {
                        <td>@item.SecondaryIdentifier</td>
                    }
                    <td>@item.Value</td>
                </tr>
            }
            </tbody>
            <tfoot>
            <!-- Pagination -->
            @if (result.Results.Count(x=> x.Type == ResultType.Error) > 10)
            {
                <button class="btn btn-primary mx-2 my-2" @onclick="() => { PreviousPage(result.Title); }" disabled="@(pagination[result.Title] <= 0)">Previous</button>
                <button class="btn btn-primary mx-2 my-2" @onclick="() => { NextPage(result.Title); }" disabled="@(pagination[result.Title] + 10 >= result.Results.Count(x => x.Type == ResultType.Error))">Next</button>
                <span class="mx-2 my-2">Page @(pagination[result.Title] / 10 + 1)</span>
            }
            </tfoot>
        </table>
    }

    <hr class="my-3"/>
}


@code {
    
    public string DirectoryToScan { get; set; } = "C:\\";
    bool isScanning { get; set; } = false;
    private Dictionary<string,int> pagination = new();
    
    private async void ScanDirectory()
    {
        isScanning = true;
        StateHasChanged();
        ILogger logger = new BIABLogger();
        instance.pagination.Clear();
        ResultState.Clear();
        List<ICodeAnalyzer> analyzers = await DirectoryScanner.ScanDirectory(DirectoryToScan, logger, Configuration);
        
        //Add the results to the list
        foreach (var analyzer in analyzers)
        {
            var analysisData = new AnalysisData(analyzer);
            ResultState.AddResult(analysisData);
            this.pagination.Add(analyzer.GetTitle(), 0);
        }
        // Do the scanning here
        isScanning = false;
    }

    public Home()
    {
        instance = this;
        ResultState.OnChanged += OnResultChanged;
    }
    
    private void OnResultChanged(object? sender, EventArgs e)
    {
        instance!.pagination.Clear();
        foreach (var analyzer in ResultState.Results)
        {
            instance.pagination.Add(analyzer.Title, 0);
        }
        StateHasChanged();
    }
    
    ~Home()
    {
        ResultState.OnChanged -= OnResultChanged;
    }
    
    private static Home? instance;
    
    public static void UpdateResults(List<AnalysisData> dataAnalyzers)
    {
        ResultState.SetResult(dataAnalyzers);
    }
    
    private int GetScore(AnalysisData results)
    {
        if (!results.Results.Any())
        {
            return 100;
        }
        if (results.Results.All(x => x.Type == ResultType.Success))
        {
            return 100;
        }

        return results.CurrentScore;
    }
    
    private void NextPage(string title)
    {
        pagination[title]+=10;
        StateHasChanged();
    }
    
    private void PreviousPage(string title)
    {
        pagination[title]-=10;
        if (pagination[title] < 0)
        {
            pagination[title] = 0;
        }
        StateHasChanged();
    }

    private async void ImportFile(InputFileChangeEventArgs  obj)
    {
        var file = obj.File;
        if (file != null)
        {
            List<AnalysisData> analyzers = new List<AnalysisData>();
            List<string> lines = new();
            
            MemoryStream ms = new();
            await file.OpenReadStream().CopyToAsync(ms);
            ms.Position = 0;
            using StreamReader reader = new(ms);
            while (!reader.EndOfStream)
            {
                lines.Add(reader.ReadLine());
            }
            string json = string.Join(Environment.NewLine, lines);
            analyzers = JSONHelper.ParseJson(json).Analyzers;
            
            UpdateResults(analyzers);
        }
    }


    public static void ExportResults()
    {
        string json = JSONHelper.SerializeJson(ResultState.Results);
        string path = Path.Combine(Directory.GetCurrentDirectory(), "results.json");
        new CommonJSWrapper(instance.JSRuntime).SaveAsFile(path, json);
    }

}

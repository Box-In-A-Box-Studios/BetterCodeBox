@using BetterCodeBox.Lib
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
<div style="position:relative;height: 540px">
    <!-- Big 2x2 Box For Overall Grade -->
    <!-- then 1x1 box for each grade of data -->
    <!-- Start a Grid -->
    <div style="position: relative; height: inherit">
        <div class="d-inline-block" style="aspect-ratio: 1; height: inherit">
            <div class="card" style="height: 100%; width: 100%">
                <div class="card-header">
                    <h2 style="height: 48px">Overall Grade</h2>
                </div>
                <div class="card-body justify-content-center align-middle text-center" style="position: relative">
                    <CircleLetterGrade Score="GetOverallGrade()" Scale="180" />
                </div>
            </div>
        </div>
        <div class="d-inline-block" style="overflow-x: auto; overflow-y: hidden; height: 540px; top: 0; left: 552px; right: 0px; position: absolute">
            @for (var index = 0; index < Data.Count; index++)
            {
                var item = Data[index];
                <div style="aspect-ratio: 1; width: 256px; height: 256px; position: absolute; top: @(index%2 * (256+12))px; left: @(index/2 * (256+12))px">
                    <div class="card" style="height: 100%; width: 100%" @onclick="async () => { await ScrollToElement(item); }">
                        <div class="card-header">
                            <h5 style="height: 48px">@item.Title</h5>
                        </div>
                        <div class="card-body justify-content-center align-middle text-center" style="position: relative">
                            <CircleLetterGrade Score="item.CurrentScore" Scale="60"/>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>


@code {

    [Parameter] public List<AnalysisData> Data { get; set; }
    
    
    private int GetOverallGrade()
    {
        var total = 0;
        
        foreach(var item in Data)
        {
            total += item.CurrentScore switch
            {
                >= (int)LetterGrade.Grades.A => 4,
                >= (int)LetterGrade.Grades.B => 3,
                >= (int)LetterGrade.Grades.C => 2,
                >= (int)LetterGrade.Grades.D => 1,
                _ => 0
            };
        }
        
        int average = total / Data.Count;
        
        return average switch
        {
            >= 4 => (int)LetterGrade.Grades.A,
            >= 3 => (int)LetterGrade.Grades.B,
            >= 2 => (int)LetterGrade.Grades.C,
            >= 1 => (int)LetterGrade.Grades.D,
            _ => (int)LetterGrade.Grades.F
        };
    }
    
    private async Task ScrollToElement(AnalysisData item)
    {
        await new CommonJSWrapper(JSRuntime).ScrollToElement(item.FileTitle);
    }
}